name: Django CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]

    services:
      postgresql:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      PIPENV_VENV_IN_PROJECT: 1
      PIPENV_IGNORE_VIRTUALENVS: 1

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pipenv'
        cache-dependency-path: |
          /home/runner/work/cursodjango/cursodjango/Pipfile.lock

    - name: Cache folder path
      run: mkdir -p /home/runner/.local/share/virtualenvs

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip pipenv
        pipenv sync --dev

    - name: Connect to PostgreSQL
      run: |
        psql postgres://postgres:postgres@localhost -c "CREATE DATABASE testdb;"

    - name: Create env var file
      run: |
        cp contrib/env-sample .env

    - name: Run linter
      run: |
        pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        pipenv run flake8 . --count --exit-zero --max-complexity=10 --statistics

    - name: Test with pytest
      run: |
        pipenv run pytest --cov=./pypro --cov-report=xml

    - name: Upload coverage reports to Codecov with GitHub Action
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN}}
